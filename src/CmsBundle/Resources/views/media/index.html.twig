{% extends app.request.query.get("CKEditor") is not null or inline ? '@Cms/interface_empty.html.twig' : (selector is defined ? '@Cms/interface_empty.html.twig' : '@Cms/base.html.twig') %}
{% trans_default_domain 'cms' %}
{% block pagetitle %}{{'Media'|trans}}{% endblock %}

{% macro parse_folders(folders, Parent, depth, selected, multiLang) %}
  {% import _self as macros %}
  <ul class="tree-children depth-{{depth}}" data-depth="{{depth}}" data-parent="{{depth > 1 ? Parent.id : 'null'}}" style="{{depth > 1 ? 'display:none;' : ''}}">
    {% for Folder in folders %}
      {% if (depth == 1 and Folder.parent is null) or depth > 1 %}
      <li>
        <span class="folder" style="cursor: pointer; position: relative;" data-id="{{Folder.id}}" data-depth="{{ depth }}" id="sidebar-folder-{{Folder.id}}">
          {% if Folder.children.count %}
          <div style="display: block;" title="{{Folder.getLabel}}" onclick="openFolder(this,{{Folder.id}});{{depth >= 3 ? '$(\'.create-folder\').hide();' : '$(\'.create-folder\').show();'}}">
          {% else %}
          <div style="display: block;" title="{{Folder.getLabel}}" onclick="openFolder(this,{{Folder.id}});{{depth >= 3 ? '$(\'.create-folder\').hide();' : '$(\'.create-folder\').show();'}}">
          {% endif %}
            {% if Folder.children.count %}
            <i class="fa has-children fa-plus" onclick="showFolderSubs(this,{{Folder.id}});"></i>
            <i class="fa fa-circle-notch fa-spin" style="display:none;"></i>
            {% endif %}
            <i class="fa no-children fa-folder"></i>

            {{Folder.getLabel(multiLang)|raw}}
			{% if Folder.media.count > 0 %}
				<span class="dir-file-count">{{Folder.media.count}}</span>
			{% endif %}
          </div>
        </span>
      </li>
      {% endif %}
    {% endfor %}
  </ul>
{% endmacro %}

{% block body %}
	{% set multiLang = (languages|length) > 0 %}
	{% if is_granted('ROLE_SUPER_ADMIN') %}
		{% if app.request.get('inlineedit') %}
			{% if Media and Media.id is not empty %}
				{% set callbackUrl = (path('admin_media_edit', {id: Media.id})|url_encode) %}
				<script>
				function doCompress(){
					var compressUrl = '{{path('admin_media_compress', {id: Media.id, inlineedit: 1, callback: callbackUrl, callbackType: 'modal'})|raw}}';
					cpop.large().loadAjax(compressUrl);
				}
				</script>
				<ul class="media-edit-tabs">
					<li><button class="active" type="button"><i class="far fa-images"></i> Media bibliotheek</button></li>
					<li><button onclick="editMedia(callerEl)" type="button"><i class="fa fa-magic"></i> Afbeelding bewerken</button></li>
					{% if Settings.tinypngApi is not empty %}
						<li><button onclick="doCompress()" type="button"><i class="far fa-file-archive"></i> Afbeelding comprimeren</button></li>
					{% endif %}
				</ul>
			{% endif %}
		{% endif %}
	{% endif %}

	<style>
	i.cropped {
	    display: none;
	}

	.cropped i.cropped {
	    display: block;
	    position: absolute;
	    top: 10px;
	    right: 10px;
	    z-index: 10;
	    color: white;
	    text-shadow: 0px 0px 3px rgba(0,0,0,1);
	}

	.img_ext {
	    position: absolute;
	    top: 0;
	    right: 0;
	    z-index: 100;
	    text-transform: uppercase;
	    font-weight: bold;
	    color: white;
	}

	.img_ext span {
		background-color: #179bde;
		font-size: 11px;
		padding: 0 3px;
		border-radius: 4px;
		line-height: 14px;
		height: 14px;
		display: inline-block;
		margin: 0 1px;
	}

	.img_ext span.webp {
		background-color: #ff5656;
	}
	</style>
	{% if app.request.get('inlineedit') is empty %}
		<style>
		.image-load.bg-lazy {
			background-image: none !important;
			background-color: #2B333E !important;
		}
		</style>
	{% endif %}

	<script type="text/javascript">
	var activeFolder = 0;

	var strings = {
		idle:      '{{ 'Sleep afbeeldingen naar dit blok om ze toe te voegen.' | trans }}',
		hover:     '{{ 'Laat los om de afbeelding toe te voegen.' | trans }}',
		uploading: '{{ 'Bezig met uploaden ...' | trans }}',
		done_idle: '{{ 'Overdracht voltooid.' | trans }}',
		file_type: '{{ 'Ongeldig bestandstype.' | trans }}',
		too_large: '{{ 'Bestand is te groot.' | trans }}',
		too_many:  '{{ 'Teveel bestanden, maximaal 10.' | trans }}',
	};

	var totalUploadSize = 0;
	var mediaFileDrop;
	var dropped = 0;
	var msg_idle = '{{"Sleep hier bestanden naar toe om deze toe te voegen."|trans}}';
	var msg_hover = '{{"Laat los om toe te voegen."|trans}}';
	var msg_uploading = '{{"Bezig met uploaden..."|trans}}';
	var msg_done_idle = '{{"Uploaden voltooid!"|trans}}';

    var allowedDocTypes = ['application/csv', 'application/doc', 'application/excel', 'application/ms-doc', 'application/mspowerpoint', 'application/msword', 'application/octet-stream', 'application/pdf', 'application/powerpoint', 'application/rtf', 'application/vnd.apple.keynote', 'application/vnd.apple.numbers', 'application/vnd.apple.pages', 'application/vnd.ms-excel', 'application/vnd.ms-powerpoint', 'application/vnd.openxmlformats-officedocument.presentationml.presentation', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document', 'application/x-excel', 'application/x-iwork-keynote-sffkey', 'application/x-iwork-numbers-sffnumbers', 'application/x-msexcel', 'application/x-mspowerpoint', 'application/x-rar-compressed', 'application/zip', 'audio/basic', 'audio/mpeg', 'audio/ogg', 'audio/vnd.rn-realaudio', 'audio/vorbis', 'audio/wav', 'audio/x-midi', 'audio/x-pn-realaudio', 'audio/x-wav', 'text/asp', 'text/css', 'text/csv', 'text/html', 'text/pascal', 'text/php', 'text/plain', 'text/richtext', 'text/sgml', 'text/uri-list', 'text/webviewhtml', 'text/x-asm', 'text/x-c', 'text/x-java-source', 'text/x-pascal', 'text/x-script.csh', 'text/x-script.elisp', 'text/x-script.perl', 'text/x-script.perl-module', 'text/x-script.phyton', 'text/x-script.sh', 'text/x-server-parsed-html', 'text/x-setext', 'text/x-sgml', 'text/x-uuencode', 'video/avi', 'video/mp4', 'video/mpeg', 'video/msvideo', 'video/quicktime', 'video/x-msvideo'];
    var allowedMediaTypes = ['image/bmp', 'image/gif', 'image/jpeg', 'image/png', 'image/svg+xml', 'image/tiff'];

    var allowedTypes = $.merge( $.merge([], allowedMediaTypes), allowedDocTypes)

	let fileSizeWarning = '{{ 'Bestand is te groot. Maximaal toegestaan:<br />Media bestanden: %mediafilesize% KB<br />Alle overige bestanden: %filesize% MB' | trans({'%mediafilesize%': maxMediaFileSize, '%filesize%': maxFileSize}) | raw }}';

    var didDrag = false;
    var draggingOver = false;

    var dragTimer;
    function checkIfStillDragging(){
    	clearTimeout(dragTimer);
		dragTimer = setTimeout(function(){
    		$('#media-dropzone').removeClass('fle-hover');
	        $('#media-dropzone-message').hide();
	        $('#media-dropzone-message-alt').hide();
    	}, 700);
    }

	var dropzoneConfig = {
	    fallback_id: 'media_upload_button',   // an identifier of a standard file input element, becomes the target of "click" events on the dropzone
	    url: '{{path('admin_media')}}',              // upload handler, handles each file separately, can also be a function taking the file and returning a url
	    paramname: 'media[]',          // POST parameter name used on serverside to reference file, can also be a function taking the filename and returning the paramname
	    withCredentials: true,          // make a cross-origin request with cookies
	    data: {
	        mediadirid: '{{mediaDirId}}',           // send POST variables
	    },
	    /*headers: {          // Send additional request headers
	        'header': 'value'
	    },*/
	    error: function(err, file) {
	        switch(err) {
	            case 'BrowserNotSupported':
	            	$('#upload-overlay').hide();
	                alert('{{ 'browser does not support HTML5 drag and drop' | trans }}')
	                break;
	            case 'TooManyFiles':
	            	$('#upload-overlay').hide();
	                cpop.loadHtml(' {{ 'U heeft teveel bestanden geselecteerd. Het maximum aantal bestanden die u gelijktijdig kunt uploaden is 10 bestanden.' | trans }} ');

			        $('#media-dropzone').removeClass('fle-hover').removeClass('hover').html(strings.idle)
			        $('#media-dropzone-message').hide();
			        $('#media-dropzone-message-alt').html('{{ 'Sleep hier media heen om te uploaden' | trans }}').show();
			        $('#media-shade,#media-modal').removeClass('show');
	                break;
	            case 'FileTooLarge':
	            	$('#upload-overlay').hide();
	                cpop.loadHtml(fileSizeWarning);
			        $('#media-dropzone').removeClass('fle-hover').removeClass('hover').html(strings.idle)
			        $('#media-dropzone-message').hide();
			        $('#media-dropzone-message-alt').html(' {{ 'Sleep hier media heen om te uploaden' | trans }}').show();
			        $('#media-shade,#media-modal').removeClass('show');
	                break;
	            case 'FileTypeNotAllowed':
	            	$('#upload-overlay').hide();
	                cpop.loadHtml("{{'Bestandstype' |trans({}) | raw ~  '\''}}" + file.type + "{{'\'' ~ "is niet toegestaan.<br/><br/><strong>Toegestane bestanden:</strong><ul><li>" | trans({}) | raw }}" + allowedTypes.join('</li><li>') + '</li></ul>');
			        $('#media-dropzone').removeClass('fle-hover').removeClass('hover').html(strings.idle)
			        $('#media-dropzone-message').hide();
			        $('#media-dropzone-message-alt').html(' {{ 'Sleep hier media heen om te uploaden' | trans }}').show();
			        $('#media-shade,#media-modal').removeClass('show');
	                break;
	            case 'FileExtensionNotAllowed':
	            	$('#upload-overlay').hide();
	                break;
	            default:
	                break;
	        }
	    },
	    allowedfiletypes: allowedTypes,   // filetypes allowed by Content-Type.  Empty array means no restrictions
	    allowedmediafiletypes: allowedMediaTypes,
	    allowedfileextensions: [], // file extensions allowed. Empty array means no restrictions
	    maxfiles: 10,
	    /*{% if app.request.query.get("CKEditor") is not null or inline %}
	    enableClick: false,
	    {% endif %}*/
	    maxfilesize: {{maxFileSize}},    // max file size in MBs
	    maxmediafilesize: {{maxMediaFileSize}}, // max images file size in KB's
	    dragOver: function(x,y,z) {
	        $('#media-dropzone').addClass('hover').html(strings.hover);
	        didDrag = true;
	        checkIfStillDragging();
	    },
	    dragLeave: function() {
	    	$('#media-dropzone').removeClass('hover').html(strings.idle)
	    },
	    docOver: function(x,y,z) {
	        $('#media-dropzone').addClass('fle-hover');
	        $('#media-dropzone-message').show().html(msg_hover);
	        $('#media-dropzone-message-alt').show().html(msg_hover);
	    },
	    docLeave: function() {
	        $('#media-dropzone').removeClass('fle-hover');
	        $('#media-dropzone-message').hide();
	        $('#media-dropzone-message-alt').hide();
	    },
	    drop: function(x,y,z) {
	    	if(didDrag){
	    		clearTimeout(dragTimer);
		        totalUploadSize = 0;
		        dropped = 0;
		        $('.cancel-btn').show();
		        didDrag = false;

		        $('#upload-overlay').show();
		        $('#upload-overlay .progress-bar').css('width', '0%');
		    }
	    },
	    uploadStarted: function(i, file, len){
	    	$('#upload-overlay').show();
	    },
	    uploadFinished: function(i, file, response, time) {},
	    progressUpdated: function(i, file, progress) {},
	    globalProgressUpdated: function(progress) {
	        $('#upload-overlay .progress-bar').css('width', progress + '%');
	    },
	    speedUpdated: function(i, file, speed) {},
	    rename: function(name) {},
	    beforeEach: function(file) {
	        dropped++;
	    },
	    beforeSend: function(file, i, done) {
	    	if(dropped <= 0){
	    		$('.totals').hide();
	    	}
	        $('#media-dropzone').removeClass('hover').html(strings.uploading)
	        done(); // Start upload
	        $('#media-dropzone-message').show().html(msg_uploading);
	        $('#media-dropzone-message-alt').show().html(msg_uploading);
	    },
	    afterAll: function() {
	        $('#media-dropzone').removeClass('hover').html(strings.done_idle)
	        $('#media-dropzone-message').hide();
	        $('#media-dropzone-message-alt').html('{{ 'Sleep hier media heen om te uploaden' | trans }}').show();

	        $('#upload-overlay').hide();
	        $('#upload-overlay .progress-bar').css('width', '0%');

	        {% if inline %}
	        	cpop.reload();
	        {% else %}
		        openFolder(null,dropzoneConfig.data.mediadirid);
	        {% endif %}
	    }
	};
	</script>
	<div>
		{% set rand = random() %}
		{% if isModal %}
			<div class="breadcrumbs">
				{% for url,label in asset_crumbs %}
					<a class="breadcrumb" href="{{url}}" itemprop="item">{{label}}</a>
				{% endfor %}
		    </div>
		{% endif %}
		{% if inline %}
			<h3 class="popup-title">{{ 'Media bibliotheek' | trans }}</h3>
		{% else %}
			<div class="btn-bar">
				<div class="right">
					<a href="#" onclick="$('#media-dropzone').data('enableClick', '1');$('#media-dropzone').click();" class="btn"><i class="fa fa-cloud-upload-alt" style="margin-right:10px;font-size:14px;"></i>{{'Bestanden uploaden'|trans}}</a>
				</div>
			</div>
		{% endif %}

		<div class="row">
			<div class="library cards-responsive{{rand}}" id="cr{{rand}}" style="{{inline ? 'box-shadow:none;' : ''}}">

				<form class="cpop-keep" method="post" enctype="multipart/form-data">
					<input type="hidden" id="mediadirid" name="mediadirid" value="{{mediaDirId}}" />
					<input type="hidden" name="manual_upload" value="1" />
					<input type="file" name="media[]" id="media_upload_button" />
					<button type="submit">{{'Uploaden'|trans}}</button>
				</form>

			    <div class="column-wrapper">
					{% if inline %}
					{% else %}
		  		<div class="sidebar" data-simplebar>
		  			{% if folders_root %}
            <div class="tree-children depth-0" data-depth="0" data-parent="null">
              <div class="grid-element folder {{Mediadir ? '' : 'active'}}" data-depth="0" data-id="0" id="sidebar-folder-0">
                <span onclick="openFolder(this,0)">
                  <div id="root-dir" title="{{ 'Media' | trans }}">
                    <div class="card">
                      <div class="card-body">
                        <h6 class="card-title">
                          {{ 'Bibliotheek' | trans }} ({{folders_root|length}})
                        </h6>
                      </div>
                    </div>
                  </div>
                </span>
                {{ _self.parse_folders(folders_root, null, 1, null, multiLang) }}
              </div>
              </div>
				  	{% endif %}
	        </div>
					{% endif %}

					{# <div class="file-container mode-{{selectedSegment}}" style="width: 100%;position: relative;"> #}
					<div class="file-container mode-tile" style="width: 100%;position: relative;">
            <div class="file-container-wrapper">
          			<div id="media-dropzone" class="dropzone" style="margin-bottom:20px;">
          				{{ 'Sleep afbeeldingen naar dit blok om ze toe te voegen' | trans }}
          			</div>


					<!-- Modal -->
					<div class="modal fade" id="newFolderModal" tabindex="-1" aria-labelledby="newFolderModalLabel" aria-hidden="true">
						<div class="modal-dialog">
							<div class="modal-content">
							<div class="modal-header">
								<h5 class="modal-title" id="newFolderModalLabel">Nieuwe map aanmaken</h5>
								<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
							</div>
							<div class="modal-body">
								<div class="mb-3">
									<label for="foldername" class="form-label">Map naam</label>
									<input type="text" name="foldername" class="form-control" id="foldername" placeholder="{{ 'Nieuwe map' | trans }}">
								</div>
							</div>
							<div class="modal-footer">
								<button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Sluiten</button>
								<button type="button" onclick="createFolder(this);" class="btn btn-primary">Aanmaken</button>
							</div>
							</div>
						</div>
					</div>

			            <div class="file-container-bar">
	  						<h3>
	  							{{ 'Bestanden' | trans }} (<span id="file-count">{{files|length}}</span>)
	  						</h3>

	  						<div class="display-options">
	  							{# {% if inline == false %} #}
			  		    	{# {% endif %} #}
	  							{# <div class="segments">
	  								<a href="#" class="list-mode {{selectedSegment == 'list' ? 'active' : ''}}" data-mode="list" onclick="runSegment(this);$(this).closest('.file-container').removeClass('mode-tile').addClass('mode-list');"><i class="fa fa-list"></i></a>
	  								<a href="#" class="tile-mode {{selectedSegment == 'tile' ? 'active' : ''}}" data-mode="tile" onclick="runSegment(this);$(this).closest('.file-container').removeClass('mode-list').addClass('mode-tile');"><i class="fa fa-th-large"></i></a>
	  							</div> #}
	  							<div class="segment-select">
	  								<select id="sort" class="browser-default">
	  									<option value="dateAdd_asc">{{ 'Datum (oplopend)' | trans }}</option>
	  									<option selected value="dateAdd_desc">{{ 'Datum (aflopend)' | trans }}</option>
	  									<option value="label_asc">{{ 'Bestandsnaam (oplopend)' | trans }}</option>
	  									<option value="label_desc">{{ 'Bestandsnaam (aflopend)' | trans }}</option>
	  									<option value="size_asc">{{ 'Grootte (oplopend)' | trans }}</option>
	  									<option value="size_desc">{{ 'Grootte (aflopend)' | trans }}</option>
	  								</select>
	  							</div>
	  						</div>

	  						<div class="media-breadcrumbs">{{crumbs|raw}}</div>
			            </div>
						<div class="row" id="media-list">
							<div class="folders">

								{# PREVIOUS FOLDER #}
								{# <div class="grid-element folder" data-id="{{Folder.parent.id}}">
									<div class="card hoverables">
										<span class="card-title" title="{{Folder.parent.getLabel}}" style="cursor:pointer;" onclick="openFolder(this,{{Folder.parent.id}})">
											<i class="material-icons">arrow_upward</i>
											{{Folder.parent.getLabel}}
										</span>

										<div class="list-options"></div>
									</div>
								</div> #}
								{% if Mediadir %}
									<div class ="grid-element folder folder-up" data-id="100">
										<div class="card hoverables" style="cursor:pointer;" onclick="openFolder(this,{{Mediadir.parent ? Mediadir.parent.id : '0'}})">
											<span class="card-title" title="Paginas">
												<i class="fa fa-arrow-up"></i>
												{% if Mediadir.parent %}
													{{Mediadir.parent.label}}
												{% else %}
													<i class="fa fa-home"></i> {{ 'Bibliotheek' | trans }} ({{folders_root|length}})
												{% endif %}
											</span>
											<div class="list-options"></div>
										</div>
									</div>
								{% endif %}

								{% if folders is not empty %}
									{% for Folder in folders %}
										{# FOLDERS #}
										<div class="grid-element folder" data-id="{{Folder.id}}">
											<div class="card hoverables">
												<span class="card-title" title="{{Folder.getLabel}}" style="cursor:pointer;" onclick="openFolder(this,{{Folder.id}})">
													<i class="fa fa-folder"></i>
													{{Folder.getLabel(multiLang)|raw}}
												</span>

												<div class="list-options"></div>
											</div>
										</div>
									{% endfor %}
								{% endif %}
							</div>
							{% if files is not empty %}
								{% for Media in files %}
									{# FILES #}
									<div class="grid-element file" data-id="{{Media.id}}">
										<div class="card hoverables">

											<div class="card-image {{Media.type == 'images' ? 'images' : 'other'}} {{Media.realCropSource ? 'cropped' : ''}}" style="cursor:pointer;" onclick="loadMedia('{{Media.id}}', '/{{Media.getWebPath}}', '{{Media.label}}');" data-url="/{{Media.getWebPath}}">
												{% if Media.type == 'images' %}
													<span class="img_ext">
														<span class="{{Media.getExtension()}}">{{Media.getExtension()}}</span>
														{% if Media.hasWebp() %}
															<span class="webp">webp</span>
														{% endif %}
													</span>
													<div class="imagebox image-load bg-lazy" style="background: url(/{{Media.getWebPath('small')}}) center; background-size: cover;">
														<img src="{{asset('bundles/cms/images/transparent_square.gif')}}" />
													</div>
												{% elseif Media.mime matches '{^video.*$}' %}
													<div class="imagebox">
														<video src="/{{Media.getWebPath()}}" loop playsinline autoplay muted style="width:100%;position: absolute;top: 50%;transform: translateY(-50%);"></video>
														<img src="{{asset('bundles/cms/images/transparent_square.gif')}}" />
													</div>
												{% else %}
													<div class="imagebox image-load bg-lazy" style="background: url({{asset('bundles/cms/images/filetypes/' ~ Media.getFileImage)}}) center; background-size: 50%;background-repeat:no-repeat;">
														<img src="{{asset('bundles/cms/images/transparent_square.gif')}}" />
													</div>
												{% endif %}
												{% if inline == false %}
													<div class="card-actions">
														<div class="vtable">
															<div class="valign">
																<a href="{{path('admin_media_view', {'id': Media.id})}}"><i class="fa fa-search"></i></a>
																{#<a href="{{path('admin_media_delete', {'id': Media.id})}}" class="confirm" data-msg="Weet u zeker dat u dit bestand wilt verwijderen?"><i class="material-icons red-text text-lighten-2">clear</i></a>#}
															</div>
														</div>
													</div>
												{% endif %}

												<i class="cropped fa fa-cut"></i>
											</div>

											<span class="card-title" title="{{Media.getLabel}}" style="cursor:pointer;" onclick="loadMedia('{{Media.id}}', '/{{Media.getWebPath}}', '{{Media.label}}');" data-url="/{{Media.getWebPath}}">
												<i class="fa fa-file"></i>
												{{Media.getLabel}}
											</span>

											<div class="list-options">
												<input type="hidden" id="url-{{Media.id}}" value="{{baseurl}}/{{Media.getWebPath}}" />
												<span class="filesize">{{format_bytes(Media.size)}}</span>
												{% if inline == false %}
													<span onclick="copyClipboard('url-{{Media.id}}');" style="cursor:pointer;"  class="copyurl tooltipped" data-position="top" data-delay="300" data-tooltip="{{'Kopieer URL'|trans}}">
														<i class="far fa-clipboard"></i>
													</span>
												{% endif %}
											</div>
										</div>
									</div>
								{% endfor %}
							{% else %}
								<div class="col s12 no-media">
									{{ 'Er is geen media in deze folder aanwezig' | trans }}
								</div>
							{% endif %}
						</div>

						{% if inline %}
						{% else %}
				            <div class="footer-buttons">
				              <button type="button" onclick="deleteFolder();" class="del-folder btn red" style="display: none;margin: 0;"><i class="far fa-trash-alt"></i> {{'Folder verwijderen'|trans}}</button>
				              <button type="button" data-bs-toggle="modal" data-bs-target="#newFolderModal" class="create-folder popup btn" style="margin: 0;"><i class="fa fa-folder"></i> {{'Folder aanmaken'|trans}}</button>
				            </div>
			            {% endif %}
					</div>
				</div>
		    </div>

			<script>
			function runSegment(el){
				var seg = $(el).closest('.segments');
				seg.find('a').removeClass('active');
				$(el).addClass('active');

				Cookies.set('t-media-segment', $(el).data('mode'));
			}
			</script>
		</div>

		{#
			UPLOAD
		 #}

		<div class="upload-shade">
			<div id="media-shade" class=""></div>
			<div id="modal" class=" bottom-center">
				<div class="modal-content">
					<div class="files"></div>
					<div class="totals">
						<div class="file-upload-totals">
							<span class="label">{{'Proces'|trans}}</span>
							<div class="right">
								<span class="size"></span>
								<span class="speed"></span>
								<span class="progress">0 %</span>
								<a href="#" class="delete"></a>
							</div>
							<div class="progress-bar"><div class="progress" style="width:0%;"></div></div>
						</div>
					</div>
					<div class="actions">
						<button type="button" class="btn btn-primary" onclick="closeModal();">{{'Sluiten'|trans}}</button>
					</div>
				</div>
			</div>
		</div>
	</div>

	{% if inline %}
		<div id="popup_footer">
			<div class="left">
				<button type="button" class="btn-flat" onclick="cpop.close();">{{'Sluiten'|trans({})|raw}}</button>
			</div>
			<button type="button" class="btn" onclick="$('#media-dropzone').data('enableClick', '1');$('#media-dropzone').click();">{{ 'Bestand uploaden' | trans }}</button>
		</div>
	{% endif %}


	<script type="text/javascript" src="{{asset('bundles/cms/js/jquery.filedrop.js')}}"></script>
	<script type="text/javascript">
	var moveUrl = '{{path('admin_media_move')}}';

	$().ready(function(){
		{% if folders %}
			initDrag();
		{% endif %}

		{% if mediaDirId %}
			var active = $('[data-id="{{mediaDirId}}"]');
			active.addClass('active');
			var parent = active.parent();
			parent.show();
			if(parent.closest('.tree-children').length){
				parent = parent.parent().closest('.tree-children');
				parent.show();
				if(parent.closest('.tree-children').length){
					parent = parent.parent().closest('.tree-children');
					parent.show();
					if(parent.closest('.tree-children').length){
						parent = parent.parent().closest('.tree-children');
						parent.show();
						if(parent.closest('.tree-children').length){
							parent = parent.parent().closest('.tree-children');
							parent.show();
						}
					}
				}
			}
		{% endif %}
	});

	activeFolder = {{mediaDirId ? mediaDirId : 0}};

	function deleteFolder(){
		if(confirm('{{ 'Wilt u de huidige map verwijderen?' | trans }}')){
			$.ajax('{{path('admin_mediadir_delete')}}/' + activeFolder).done(function(r){
				var parent = $('[data-id="' + activeFolder + '"]').parent();
				$('[data-id="' + activeFolder + '"]').remove();
				if(parent.children().length == 0){
					parent.parent().find('.has-children').remove();
				}
				openFolder($('#root-dir'),0);
			});
		}
	}

	function copyStringToClipboard (str) {
		console.log( 'copy:', str );
		// Create new element
		var el = document.createElement('textarea');
		// Set value (string to be copied)
		el.value = str;
		// Set non-editable to avoid focus and move outside of view
		el.setAttribute('readonly', '');
		el.style = {position: 'absolute', left: '-9999px'};
		document.body.appendChild(el);
		// Select text inside element
		el.select();
		// Copy text to clipboard
		document.execCommand('copy');
		// Remove temporary element
		document.body.removeChild(el);
		Toastify({
			text: 'De URL is gekopieerd!',
			duration: 2000,
			escapeMarkup: false,
			close: false,
			gravity: "bottom",
			position: "right",
			stopOnFocus: true,
			onClick: function(){}
		}).showToast();
	}

	function copyClipboard(id) {
		copyStringToClipboard($('#' + id).val());
	}

	function initDrag(){
	    $( ".grid-element.file" ).draggable({
	    	revert: true,
	    	revertDuration: 200,
	    	cursorAt: {
	    		left: 0,
	    		top: 0
	    	},
	    	// snap: true,
	    	helper: function(el){
				var myNewBlock = $(el.currentTarget).clone();
				myNewBlock.css('transform', 'scale(0.5)');
				myNewBlock.css('opacity', 0.8);
				return myNewBlock;
			},
	    	// placeholder: 'sortable-placeholder',
	    	start: function(event, ui){
	    		console.log( ui.helper );
	    		ui.helper.css('opacity', 0.4);
	    		console.log( ui.helper.width(), ui.helper.height() );
				$(this).draggable('instance').offset.click = {
					left: Math.floor(ui.helper.width() / 2),
					top: Math.floor(ui.helper.height() / 2)
				};
			}
	    });
		$( ".grid-element>.card.folder,.grid-element.folder" ).droppable({
			// accept: ".file",
			hoverClass: 'ui-state-hover',
			activeClass: 'ui-state-active',
			drop: function( event, ui ) {


				ui.draggable.remove();


				var folder_id = $(this).data('id');
				var media_id = ui.draggable.data('id');


				if(ui.draggable.hasClass('folder')){
					var url = moveUrl + '/' + media_id + '/' + folder_id + '/folder';
				}else{
					var url = moveUrl + '/' + media_id + '/' + folder_id + '/file';
				}


				$.ajax(url);
			},
			activate: function( event, ui ) {
				$( ".grid-element.file" ).css('opacity', 0.3);
				ui.helper.css('opacity', 1);
			},
			deactivate: function( event, ui ) {
				$( ".grid-element.file" ).css('opacity', 1);
			},
		});
	}

	function createFolder(el){
		
		$(el).find('.fa-check').addClass('fa-spinner').addClass('fa-spin').removeClass('fa-check');
		var url = '{{path('admin_media_addfolder')}}/' + activeFolder;
		var name = $('#foldername').val();
		$.post(url, {label: name}, function(res){
			$('#newFolderModal').modal('hide');
			addFolderElement(res.id, res.label);
			openFolder(null,res.id);

			$('#foldername').val('');
			$(el).find('.fa-spinner').addClass('fa-check').removeClass('fa-spinner').removeClass('fa-spin');
		});
		
	}

	function addFolderElement(id, label){
		var currentFolderEl = $('#sidebar-folder-' + activeFolder);
		console.log( currentFolderEl );
		var newDepth = (currentFolderEl.data('depth') + 1);
		console.log( 'newDepth', newDepth );
		if(currentFolderEl.parent().children('.tree-children').length == 0){
			console.log( 'has NO tree folder' );
			treeWrapper = $('<div class="tree-children depth-' + newDepth + '" data-depth="' + newDepth + '" data-parent="' + activeFolder + '" style="' + (newDepth > 1 ? '' : '') + '"></div>');

			currentFolderEl.find('i').removeClass('no-children').removeClass('fa-folder').addClass('has-children').addClass('fa-minus');

			currentFolderEl.append(treeWrapper);
		}else{
			treeWrapper = currentFolderEl.parent().children('.tree-children');
		}

		console.log( treeWrapper );

		treeWrapper.append('<div class="grid-element folder" data-id="' + id + '" data-depth="' + newDepth + '" id="sidebar-folder-' + id + '">\
			<div class="card hoverables" style="cursor:pointer;position:relative;">\
				<span class="card-title" style="width: 90%;display: block;padding-left:' + (newDepth * 15) + 'px;" title="' + label + '" onclick="openFolder(this,' + id + ')">\
					<i class="fa fa-folder"></i> ' + label + '\
				</span>\
			</div>\
		</div>');
	}

	var container = $('#cr{{rand}}');

	var clickedOpenClose = false;
	function showFolderSubs(el, id){
		clickedOpenClose = true;
    	if($(el).hasClass('has-children')){
        	$(el).toggleClass('fa-plus').toggleClass('fa-minus');
        	if($(el).hasClass('fa-minus')){
        		if($('.tree-children[data-parent="' + id + '"]').length > 0){
	        		$('.tree-children[data-parent="' + id + '"]').show();
	        	}else{
					// Load subfolders for this folder
					var folders_url = '{{path('admin_media_folder')}}/' + id;
					$('#sidebar-folder-' + id).find('.fa-circle-notch').show();
					$.ajax(folders_url).done(function(r){
						var childhtml = '<div class="tree-children depth-' + r.depth + '" data-depth="' + r.depth + '" data-parent="' + id + '">';
						$.each(r.childs, function(ind, dir){
							console.log( dir );
							childhtml = childhtml + '<div class="grid-element">\
								<div class="folder" style="cursor:pointer;position:relative;" data-id="' + dir.id + '" data-depth="' + r.depth + '" id="sidebar-folder-' + dir.id + '">\
							            ' + (dir.folders > 0 ? '\
									      <span class="" style="display: block;padding-left:' + (r.depth * 15) + 'px;" title="' + dir.label + '" onclick="openFolder(this,' + dir.id + ');' + (r.depth >= 3 ? '$(\'.create-folder\').hide();' : '$(\'.create-folder\').show();') + '">\
							            ' : '\
							              <span class="full-width" style="display: block;padding-left:' + r.depth * 15 + 'px;" title="' + dir.label + '" onclick="openFolder(this,' + dir.id + ');' + (r.depth >= 3 ? '$(\'.create-folder\').hide();' : '$(\'.create-folder\').show();') + '">\
							            ') + '\
							            ' + (dir.folders > 0 ? '<i class="fa has-children fa-plus" onclick="showFolderSubs(this,' + dir.id + ');"></i><i class="fa fa-circle-notch fa-spin" style="display:none;float: right;margin-top: 4px;"></i>' : '') + '\
										<i class="fa no-children fa-folder"></i>\
										' + dir.label + ' <span class="dir-file-count">' + (dir.files > 0 ? dir.files : '') + '</span>\
									</span>\
								</div>\
							</div>';
						});

						childhtml = childhtml + '</div>';

						$('#sidebar-folder-' + id).parent().append($(childhtml));
						$('#sidebar-folder-' + id).find('.fa-circle-notch').hide();
					});
	        	}
        	}else{
        		$('.tree-children[data-parent="' + id + '"]').hide();
        	}
    	}
	}

	$('#sort').change(function(){
		openFolder(null, activeFolder, this.value);
	});

	var media_xhr;
	function openFolder(el, id, sort){
		if(typeof sort == 'undefined') sort = $('#sort').val();
		console.log( 'sort', sort );
		if(clickedOpenClose == false){
			activeFolder = id;

			dropzoneConfig.data.mediadirid = id;
			// console.log( dropzoneConfig );












			// Load subfolders for this folder
			var folders_url = '{{path('admin_media_folder')}}/' + id;
			$('#sidebar-folder-' + id).find('.fa-circle-notch').show();
			$.ajax(folders_url).done(function(r){
				var childhtml = '<div class="tree-children depth-' + r.depth + '" data-depth="' + r.depth + '" data-parent="' + id + '">';
				$.each(r.childs, function(ind, dir){
					console.log( dir );
					childhtml = childhtml + '<div class="grid-element">\
						<div class="folder" style="cursor:pointer;position:relative;" data-id="' + dir.id + '" data-depth="' + r.depth + '" id="sidebar-folder-' + dir.id + '">\
					            ' + (dir.folders > 0 ? '\
							      <span class="" style="display: block;padding-left:' + (r.depth * 15) + 'px;" title="' + dir.label + '" onclick="openFolder(this,' + dir.id + ');' + (r.depth >= 3 ? '$(\'.create-folder\').hide();' : '$(\'.create-folder\').show();') + '">\
					            ' : '\
					              <span class="full-width" style="display: block;padding-left:' + r.depth * 15 + 'px;" title="' + dir.label + '" onclick="openFolder(this,' + dir.id + ');' + (r.depth >= 3 ? '$(\'.create-folder\').hide();' : '$(\'.create-folder\').show();') + '">\
					            ') + '\
					            ' + (dir.folders > 0 ? '<i class="fa has-children fa-plus" onclick="showFolderSubs(this,' + dir.id + ');"></i><i class="fa fa-circle-notch fa-spin" style="display:none;float: right;margin-top: 4px;"></i>' : '') + '\
								<i class="fa no-children fa-folder"></i>\
								' + dir.label + ' <span class="dir-file-count">' + (dir.files > 0 ? dir.files : '') + '</span>\
							</span>\
						</div>\
					</div>';
				});

				childhtml = childhtml + '</div>';

				$('[data-parent="' + id + '"]').remove();

				$('#sidebar-folder-' + id).parent().append($(childhtml));
				$('#sidebar-folder-' + id).find('.fa-circle-notch').hide();
			});














			$('.grid-element>.folder,.grid-element.folder').removeClass('active');
			$('#sidebar-folder-' + id).addClass('active');
	        if(media_xhr && media_xhr.readyState != 4){
	        	console.log( 'STOP' );
	            media_xhr.abort();
	        }

	        if(id > 0){
	        	$('.del-folder').show();
	        }else{
	        	$('.del-folder').hide();
	        }

	        $('.grid-element.folder').removeClass('active');
	        $('.grid-element.folder[data-id="' + id + '"]').addClass('active');

	        if(el){
	        	if($(el).find('i.has-children').length){
	        		if($(el).find('i.has-children').hasClass('fa-plus')){
			        	$(el).find('i.has-children').toggleClass('fa-plus').toggleClass('fa-minus');
			        }
		        	if($(el).find('i.has-children').hasClass('fa-minus')){
		        		$('.tree-children[data-parent="' + id + '"]').show();
		        	}/*else{
		        		$('.tree-children[data-parent="' + id + '"]').hide();
		        	}*/
	        	}
	        }

	        $('#media-list').html('<div class="content-loading"><i class="fa fa-circle-notch"></i> {{ 'Media wordt geladen..' | trans }}</div>');
			$('#file-count').html('..');
	        // return false;

			media_xhr = $.ajax('{{path('admin_media')}}' + (typeof id != 'undefined' && id != '' ? '/' + id : '') + '?sort=' + sort + '{{gString|replace({'?': '&'})|raw}}').done(function(r){
				$('#file-count').html(r.files.length);

				$('.media-breadcrumbs').html(r.crumbs);

				if(r.depth >= 3){
					$('.create-folder').hide();
				}else{
					$('.create-folder').show();
				}

				var moveUp = '';
				if(r.parent){
					var moveUp = '<div class="grid-element folder folder-up" data-id="' + r.parent.id + '">\
						<div class="card hoverables" style="cursor:pointer;" onclick="openFolder(this,' + r.parent.id + ')">\
							\
							\
							<span class="card-title" title="' + r.parent.label + '">\
								<i class="fa fa-arrow-up"></i>\
								' + r.parent.label + '\
							</span>\
							\
							<div class="list-options"></div>\
						</div>\
					</div>';
				}

				$('#media-list').html('<div class="folders">' + moveUp + '</div>');
				if(r.folders.length){
					$.each(r.folders, function(ind, f){
						var mediaArea = '';
						var mediaObj = $('<div class="grid-element folder" data-id="' + f.id + '">\
							<div class="card hoverables" style="cursor:pointer;" onclick="openFolder(this,' + f.id + ')">\
								\
								\
								<span class="card-title" title="' + f.label + '">\
									<i class="fa fa-folder"></i>\
									' + f.label + '\
								</span>\
								\
								<div class="list-options"></div>\
							</div>\
						</div>');

						$('#media-list .folders').append(mediaObj);
					});
				}
				if(r.files.length){
					$.each(r.files, function(ind, f){
						var mediaArea = '';
						if(f.type == 'images'){
							mediaArea = f.img_ext + '<div class="imagebox" style="background: url(' + f.thumb + ') center; background-size: cover;">\
								<img src="/bundles/cms/images/transparent_square.gif" />\
							</div>';
						}else if(f.type == 'videos'){
							mediaArea = '<div class="imagebox">\
							<video src="' + f.path + '" loop playsinline autoplay muted style="width:100%;position: absolute;top: 50%;transform: translateY(-50%);"></video>\
								<img src="/bundles/cms/images/transparent_square.gif" />\
							</div>';
						}else{
							mediaArea = '<div class="imagebox" style="background: url(/bundles/cms/images/filetypes/' + f.file_image + ') center; background-size: 50%;background-repeat:no-repeat;">\
								<img src="/bundles/cms/images/transparent_square.gif" />\
							</div>';
						}

						var mediaObj = $('<div class="grid-element file" data-id="' + f.id + '">\
							<div class="card hoverables' + (f.cropped ? ' cropped' : '') + '" style="cursor:pointer;" onclick="loadMedia(\'' + f.id + '\', \'' + f.path + '\', \'' + f.label + '\', \'' + f.width + '\');" data-url="' + f.path + '">\
								\
								<div class="card-image ' + (f.type == 'images' ? 'images' : 'other') + (f.cropped ? ' cropped' : '') + '">\
									' + mediaArea + '\
									{% if inline == false %}<div class="card-actions">\
										<div class="vtable">\
											<div class="valign">\
												<a href="' + f.url_view + '"><i class="fa fa-search"></i></a>\
											</div>\
										</div>\
									</div>{% endif %}\
								</div>\
								<i class="cropped fa fa-cut"></i>\
								\
								<span class="card-title" title="' + f.label + '">\
									<i class="fa fa-file"></i>\
									' + f.label + '\
								</span>\
								\
								<div class="list-options">\
									<input type="hidden" id="url-' + f.id + '" value="' + f.url + '" />\
									<span class="filesize">' + f.size_format + '</span>\
									{% if inline == false %}<span class="copyurl" onclick="copyClipboard(\'url-' + f.id + '\');" style="cursor:pointer;">\
											<i class="far fa-clipboard"></i> Kopieer URL\
									</span>{% endif %}\
								</div>\
							</div>\
						</div>');

						$('#media-list').append(mediaObj);
					});
				}else{
					$('#media-list').append($('<div class="col s12 no-media">{{ 'Er is geen media in deze folder aanwezig' | trans }}</div>'));
				}

				initDrag()
			});

		}
        clickedOpenClose = false;
	}
	{% if app.request.query.get("src") is not null %}
		{% if app.request.query.get('src') == 'video-popup' %}
			/* #1 */
			function loadMedia(mediaid, url, label, width){
	            addVideo(null, url);
			}
		{% else %}
			/* #2 */
			var ref = {{app.request.query.get("ref")}};
			function loadMedia(mediaid, url, label, width){
				window.CKEDITOR.tools.callFunction( ref, url );
	            cpop.close();
			}
		{% endif %}
	{% elseif app.request.query.get("CKEditor") is not null %}
		/* #3 */
		var ref = {{app.request.query.get("ref")}};
		function loadMedia(mediaid, url, label, width){
			window.CKEDITOR.tools.callFunction( ref, url );
            cpop.close();
		}
	{% elseif composer %}

		{% if app.request.get('btn') %}
			/* #4 */
			function loadMedia(mediaid, url, label, width){
				linkSelector(null, 'linkComposerPage', 'linkComposerMedia', '&url=' + encodeURIComponent(url) + '&label=' + encodeURIComponent(label));
			}
		{% else %}
			/* #5 */
			function loadMedia(mediaid, url, label, width){
				clickedPopupMedia(mediaid, url, label, width);
	            cpop.close();
			}
		{% endif %}
	{% elseif inline %}
		{% if app.request.get('btn') %}
			/* #6 */
			function loadMedia(mediaid, url, label, width){
				linkSelector(null, 'linkComposerPage', 'linkComposerMedia', '&url=' + encodeURIComponent(url) + '&label=' + encodeURIComponent(label));
			}
		{% else %}
			/* #7 */
			function loadMedia(mediaid, url, label, width){
				Trinity.ckWriteMedia(url, mediaid);
	            cpop.close();
			}
		{% endif %}
	{% else %}
		/* #8 */
		function loadMedia(mediaid, url, label, width){
			window.location = '{{path('admin_media_view')}}/' + mediaid + '?srcdir=' + activeFolder;
		}
	{% endif %}

        var lazyloadImages;
        var lazyloadThrottleTimeout;

        function lazyload () {
                lazyloadImages = document.querySelectorAll(".bg-lazy");

                if(lazyloadThrottleTimeout) {
                        clearTimeout(lazyloadThrottleTimeout);
                }

                lazyloadThrottleTimeout = setTimeout(function() {
                        var scrollTop = window.pageYOffset;
                        lazyloadImages.forEach(function(img) {
                                if(img.offsetTop < (window.innerHeight + scrollTop)) {
                                        img.src = img.dataset.src;
                                        img.classList.remove('bg-lazy');
                                }
                        });
                        if(lazyloadImages.length == 0) {
                                document.removeEventListener("scroll", lazyload);
                                window.removeEventListener("resize", lazyload);
                                window.removeEventListener("orientationChange", lazyload);
                        }
                }, 20);
        }

	$().ready(function(){
		mediaFileDrop = $('#media-dropzone').filedrop(dropzoneConfig).find('.message').html(msg_idle);

		if (document.readyState != 'interactive') {
			lazyload();
		}
	});

	function closeModal(){
        $('#media-shade,#media-modal').removeClass('show');
	}

	function humanFileSize(size, dec = 2) {
	    var i = Math.floor( Math.log(size) / Math.log(1024) );
	    return ( size / Math.pow(1024, i) ).toFixed(dec) * 1 + ' ' + ['B', 'kB', 'MB', 'GB', 'TB'][i];
	};
	</script>

	<style>
	#was-form{
		display: none;
	}
	</style>

	<script>
  	document.addEventListener("DOMContentLoaded", function() {
  		console.log( 'START LAZY LOADING' );

  		if ("IntersectionObserver" in window) {
  			lazyloadImages = document.querySelectorAll(".bg-lazy");
  			var imageObserver = new IntersectionObserver(function(entries, observer) {
  				entries.forEach(function(entry) {
  					if (entry.isIntersecting) {
  						var image = entry.target;
  						image.classList.remove("bg-lazy");
  						imageObserver.unobserve(image);
  					}
  				});
  			});

  			lazyloadImages.forEach(function(image) {
  				imageObserver.observe(image);
  			});
  		} else {
  			document.addEventListener("scroll", lazyload);
  			window.addEventListener("resize", lazyload);
  			window.addEventListener("orientationChange", lazyload);
  		}
  	});
	{% if app.request.xmlHttpRequest %}
	{% else %}
		$( "body" ).addClass( "page-overview" );
	{% endif %}
	</script>
{% endblock %}
