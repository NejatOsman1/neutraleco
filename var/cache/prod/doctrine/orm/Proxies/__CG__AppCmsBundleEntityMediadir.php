<?php

namespace Proxies\__CG__\App\CmsBundle\Entity;


/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Mediadir extends \App\CmsBundle\Entity\Mediadir implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Proxy\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Proxy\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array<string, null> properties to be lazy loaded, indexed by property name
     */
    public static $lazyPropertiesNames = array (
);

    /**
     * @var array<string, mixed> default values of properties to be lazy loaded, with keys being the property names
     *
     * @see \Doctrine\Common\Proxy\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array (
);



    public function __construct(?\Closure $initializer = null, ?\Closure $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'App\\CmsBundle\\Entity\\Mediadir' . "\0" . 'id', '' . "\0" . 'App\\CmsBundle\\Entity\\Mediadir' . "\0" . 'label', '' . "\0" . 'App\\CmsBundle\\Entity\\Mediadir' . "\0" . 'dateAdd', '' . "\0" . 'App\\CmsBundle\\Entity\\Mediadir' . "\0" . 'dateEdit', 'parent', 'children', 'media', 'tags', '' . "\0" . 'App\\CmsBundle\\Entity\\Mediadir' . "\0" . 'settings'];
        }

        return ['__isInitialized__', '' . "\0" . 'App\\CmsBundle\\Entity\\Mediadir' . "\0" . 'id', '' . "\0" . 'App\\CmsBundle\\Entity\\Mediadir' . "\0" . 'label', '' . "\0" . 'App\\CmsBundle\\Entity\\Mediadir' . "\0" . 'dateAdd', '' . "\0" . 'App\\CmsBundle\\Entity\\Mediadir' . "\0" . 'dateEdit', 'parent', 'children', 'media', 'tags', '' . "\0" . 'App\\CmsBundle\\Entity\\Mediadir' . "\0" . 'settings'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Mediadir $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy::$lazyPropertiesDefaults as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load(): void
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized(): bool
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized): void
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null): void
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer(): ?\Closure
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null): void
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner(): ?\Closure
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @deprecated no longer in use - generated code now relies on internal components rather than generated public API
     * @static
     */
    public function __getLazyProperties(): array
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function getDepth()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDepth', []);

        return parent::getDepth();
    }

    /**
     * {@inheritDoc}
     */
    public function setLabel($label)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLabel', [$label]);

        return parent::setLabel($label);
    }

    /**
     * {@inheritDoc}
     */
    public function getLabelRaw()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLabelRaw', []);

        return parent::getLabelRaw();
    }

    /**
     * {@inheritDoc}
     */
    public function getLabel($showLanguages = false)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLabel', [$showLanguages]);

        return parent::getLabel($showLanguages);
    }

    /**
     * {@inheritDoc}
     */
    public function setDateAdd()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDateAdd', []);

        return parent::setDateAdd();
    }

    /**
     * {@inheritDoc}
     */
    public function getDateAdd()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDateAdd', []);

        return parent::getDateAdd();
    }

    /**
     * {@inheritDoc}
     */
    public function setDateEdit()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDateEdit', []);

        return parent::setDateEdit();
    }

    /**
     * {@inheritDoc}
     */
    public function getDateEdit()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDateEdit', []);

        return parent::getDateEdit();
    }

    /**
     * {@inheritDoc}
     */
    public function setParent(\App\CmsBundle\Entity\Mediadir $parent = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setParent', [$parent]);

        return parent::setParent($parent);
    }

    /**
     * {@inheritDoc}
     */
    public function getParent()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getParent', []);

        return parent::getParent();
    }

    /**
     * {@inheritDoc}
     */
    public function getParents()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getParents', []);

        return parent::getParents();
    }

    /**
     * {@inheritDoc}
     */
    public function getBreadcrumbs()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getBreadcrumbs', []);

        return parent::getBreadcrumbs();
    }

    /**
     * {@inheritDoc}
     */
    public function addChild(\App\CmsBundle\Entity\Mediadir $child)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addChild', [$child]);

        return parent::addChild($child);
    }

    /**
     * {@inheritDoc}
     */
    public function removeChild(\App\CmsBundle\Entity\Mediadir $child)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeChild', [$child]);

        return parent::removeChild($child);
    }

    /**
     * {@inheritDoc}
     */
    public function getChildren()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getChildren', []);

        return parent::getChildren();
    }

    /**
     * {@inheritDoc}
     */
    public function countChildren()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'countChildren', []);

        return parent::countChildren();
    }

    /**
     * {@inheritDoc}
     */
    public function addMedia(\App\CmsBundle\Entity\Media $medium)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addMedia', [$medium]);

        return parent::addMedia($medium);
    }

    /**
     * {@inheritDoc}
     */
    public function removeMedia(\App\CmsBundle\Entity\Media $medium)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeMedia', [$medium]);

        return parent::removeMedia($medium);
    }

    /**
     * {@inheritDoc}
     */
    public function getMedia()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMedia', []);

        return parent::getMedia();
    }

    /**
     * {@inheritDoc}
     */
    public function countMedia()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'countMedia', []);

        return parent::countMedia();
    }

    /**
     * {@inheritDoc}
     */
    public function countAll()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'countAll', []);

        return parent::countAll();
    }

    /**
     * {@inheritDoc}
     */
    public function hasTag(\App\CmsBundle\Entity\Tag $tag)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'hasTag', [$tag]);

        return parent::hasTag($tag);
    }

    /**
     * {@inheritDoc}
     */
    public function addTag(\App\CmsBundle\Entity\Tag $tag)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addTag', [$tag]);

        return parent::addTag($tag);
    }

    /**
     * {@inheritDoc}
     */
    public function removeTag(\App\CmsBundle\Entity\Tag $tag)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeTag', [$tag]);

        return parent::removeTag($tag);
    }

    /**
     * {@inheritDoc}
     */
    public function getTags()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTags', []);

        return parent::getTags();
    }

    /**
     * {@inheritDoc}
     */
    public function addMedium(\App\CmsBundle\Entity\Media $medium): \App\CmsBundle\Entity\Mediadir
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addMedium', [$medium]);

        return parent::addMedium($medium);
    }

    /**
     * {@inheritDoc}
     */
    public function removeMedium(\App\CmsBundle\Entity\Media $medium): \App\CmsBundle\Entity\Mediadir
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeMedium', [$medium]);

        return parent::removeMedium($medium);
    }

    /**
     * {@inheritDoc}
     */
    public function setSettings(\App\CmsBundle\Entity\Settings $settings = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSettings', [$settings]);

        return parent::setSettings($settings);
    }

    /**
     * {@inheritDoc}
     */
    public function getSettings()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSettings', []);

        return parent::getSettings();
    }

}
