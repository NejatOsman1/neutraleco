<?php

namespace Proxies\__CG__\App\CmsBundle\Entity;


/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Metatag extends \App\CmsBundle\Entity\Metatag implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Proxy\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Proxy\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array<string, null> properties to be lazy loaded, indexed by property name
     */
    public static $lazyPropertiesNames = array (
);

    /**
     * @var array<string, mixed> default values of properties to be lazy loaded, with keys being the property names
     *
     * @see \Doctrine\Common\Proxy\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array (
);



    public function __construct(?\Closure $initializer = null, ?\Closure $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'App\\CmsBundle\\Entity\\Metatag' . "\0" . 'key', '' . "\0" . 'App\\CmsBundle\\Entity\\Metatag' . "\0" . 'key_type', '' . "\0" . 'App\\CmsBundle\\Entity\\Metatag' . "\0" . 'value_type', '' . "\0" . 'App\\CmsBundle\\Entity\\Metatag' . "\0" . 'label', '' . "\0" . 'App\\CmsBundle\\Entity\\Metatag' . "\0" . 'placeholder', '' . "\0" . 'App\\CmsBundle\\Entity\\Metatag' . "\0" . 'sortid', '' . "\0" . 'App\\CmsBundle\\Entity\\Metatag' . "\0" . 'system', '' . "\0" . 'App\\CmsBundle\\Entity\\Metatag' . "\0" . 'id', '' . "\0" . 'App\\CmsBundle\\Entity\\Metatag' . "\0" . 'value', '' . "\0" . 'App\\CmsBundle\\Entity\\Metatag' . "\0" . 'value_options'];
        }

        return ['__isInitialized__', '' . "\0" . 'App\\CmsBundle\\Entity\\Metatag' . "\0" . 'key', '' . "\0" . 'App\\CmsBundle\\Entity\\Metatag' . "\0" . 'key_type', '' . "\0" . 'App\\CmsBundle\\Entity\\Metatag' . "\0" . 'value_type', '' . "\0" . 'App\\CmsBundle\\Entity\\Metatag' . "\0" . 'label', '' . "\0" . 'App\\CmsBundle\\Entity\\Metatag' . "\0" . 'placeholder', '' . "\0" . 'App\\CmsBundle\\Entity\\Metatag' . "\0" . 'sortid', '' . "\0" . 'App\\CmsBundle\\Entity\\Metatag' . "\0" . 'system', '' . "\0" . 'App\\CmsBundle\\Entity\\Metatag' . "\0" . 'id', '' . "\0" . 'App\\CmsBundle\\Entity\\Metatag' . "\0" . 'value', '' . "\0" . 'App\\CmsBundle\\Entity\\Metatag' . "\0" . 'value_options'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Metatag $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy::$lazyPropertiesDefaults as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load(): void
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized(): bool
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized): void
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null): void
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer(): ?\Closure
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null): void
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner(): ?\Closure
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @deprecated no longer in use - generated code now relies on internal components rather than generated public API
     * @static
     */
    public function __getLazyProperties(): array
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function setKey($key)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setKey', [$key]);

        return parent::setKey($key);
    }

    /**
     * {@inheritDoc}
     */
    public function getKey()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getKey', []);

        return parent::getKey();
    }

    /**
     * {@inheritDoc}
     */
    public function setLabel($label)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLabel', [$label]);

        return parent::setLabel($label);
    }

    /**
     * {@inheritDoc}
     */
    public function getLabel()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLabel', []);

        return parent::getLabel();
    }

    /**
     * {@inheritDoc}
     */
    public function setPlaceholder($placeholder)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPlaceholder', [$placeholder]);

        return parent::setPlaceholder($placeholder);
    }

    /**
     * {@inheritDoc}
     */
    public function getPlaceholder()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPlaceholder', []);

        return parent::getPlaceholder();
    }

    /**
     * {@inheritDoc}
     */
    public function setSortid($sortid = 0)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSortid', [$sortid]);

        return parent::setSortid($sortid);
    }

    /**
     * {@inheritDoc}
     */
    public function getSortid()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSortid', []);

        return parent::getSortid();
    }

    /**
     * {@inheritDoc}
     */
    public function setSystem($system = 0)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSystem', [$system]);

        return parent::setSystem($system);
    }

    /**
     * {@inheritDoc}
     */
    public function getSystem()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSystem', []);

        return parent::getSystem();
    }

    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setValue($value = '')
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setValue', [$value]);

        return parent::setValue($value);
    }

    /**
     * {@inheritDoc}
     */
    public function getValue()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getValue', []);

        return parent::getValue();
    }

    /**
     * {@inheritDoc}
     */
    public function setKeyType($keyType = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setKeyType', [$keyType]);

        return parent::setKeyType($keyType);
    }

    /**
     * {@inheritDoc}
     */
    public function getKeyType()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getKeyType', []);

        return parent::getKeyType();
    }

    /**
     * {@inheritDoc}
     */
    public function setValueOptions($valueOptions = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setValueOptions', [$valueOptions]);

        return parent::setValueOptions($valueOptions);
    }

    /**
     * {@inheritDoc}
     */
    public function getValueOptions()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getValueOptions', []);

        return parent::getValueOptions();
    }

    /**
     * {@inheritDoc}
     */
    public function setValueType($valueType = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setValueType', [$valueType]);

        return parent::setValueType($valueType);
    }

    /**
     * {@inheritDoc}
     */
    public function getValueType()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getValueType', []);

        return parent::getValueType();
    }

}
