<?php

namespace Proxies\__CG__\App\CmsBundle\Entity;


/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Language extends \App\CmsBundle\Entity\Language implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Proxy\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Proxy\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array<string, null> properties to be lazy loaded, indexed by property name
     */
    public static $lazyPropertiesNames = array (
);

    /**
     * @var array<string, mixed> default values of properties to be lazy loaded, with keys being the property names
     *
     * @see \Doctrine\Common\Proxy\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array (
);



    public function __construct(?\Closure $initializer = null, ?\Closure $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'App\\CmsBundle\\Entity\\Language' . "\0" . 'id', '' . "\0" . 'App\\CmsBundle\\Entity\\Language' . "\0" . 'locale', '' . "\0" . 'App\\CmsBundle\\Entity\\Language' . "\0" . 'locale_full', '' . "\0" . 'App\\CmsBundle\\Entity\\Language' . "\0" . 'label', '' . "\0" . 'App\\CmsBundle\\Entity\\Language' . "\0" . 'notify_email', 'settings', 'pages', 'hide_baseuri'];
        }

        return ['__isInitialized__', '' . "\0" . 'App\\CmsBundle\\Entity\\Language' . "\0" . 'id', '' . "\0" . 'App\\CmsBundle\\Entity\\Language' . "\0" . 'locale', '' . "\0" . 'App\\CmsBundle\\Entity\\Language' . "\0" . 'locale_full', '' . "\0" . 'App\\CmsBundle\\Entity\\Language' . "\0" . 'label', '' . "\0" . 'App\\CmsBundle\\Entity\\Language' . "\0" . 'notify_email', 'settings', 'pages', 'hide_baseuri'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Language $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy::$lazyPropertiesDefaults as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load(): void
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized(): bool
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized): void
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null): void
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer(): ?\Closure
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null): void
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner(): ?\Closure
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @deprecated no longer in use - generated code now relies on internal components rather than generated public API
     * @static
     */
    public function __getLazyProperties(): array
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setLocale($locale)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLocale', [$locale]);

        return parent::setLocale($locale);
    }

    /**
     * {@inheritDoc}
     */
    public function getLocale()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLocale', []);

        return parent::getLocale();
    }

    /**
     * {@inheritDoc}
     */
    public function setLabel($label)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLabel', [$label]);

        return parent::setLabel($label);
    }

    /**
     * {@inheritDoc}
     */
    public function getLabel()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLabel', []);

        return parent::getLabel();
    }

    /**
     * {@inheritDoc}
     */
    public function setSettings(\App\CmsBundle\Entity\Settings $settings = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSettings', [$settings]);

        return parent::setSettings($settings);
    }

    /**
     * {@inheritDoc}
     */
    public function getSettings()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSettings', []);

        return parent::getSettings();
    }

    /**
     * {@inheritDoc}
     */
    public function addPage(\App\CmsBundle\Entity\Page $page)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addPage', [$page]);

        return parent::addPage($page);
    }

    /**
     * {@inheritDoc}
     */
    public function removePage(\App\CmsBundle\Entity\Page $page)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removePage', [$page]);

        return parent::removePage($page);
    }

    /**
     * {@inheritDoc}
     */
    public function getPages()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPages', []);

        return parent::getPages();
    }

    /**
     * {@inheritDoc}
     */
    public function addSetting(\App\CmsBundle\Entity\Settings $setting)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addSetting', [$setting]);

        return parent::addSetting($setting);
    }

    /**
     * {@inheritDoc}
     */
    public function removeSetting(\App\CmsBundle\Entity\Settings $setting)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeSetting', [$setting]);

        return parent::removeSetting($setting);
    }

    /**
     * {@inheritDoc}
     */
    public function setHideBaseuri($hideBaseuri = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setHideBaseuri', [$hideBaseuri]);

        return parent::setHideBaseuri($hideBaseuri);
    }

    /**
     * {@inheritDoc}
     */
    public function getHideBaseuri()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getHideBaseuri', []);

        return parent::getHideBaseuri();
    }

    /**
     * {@inheritDoc}
     */
    public function setNotifyEmail($notifyEmail)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setNotifyEmail', [$notifyEmail]);

        return parent::setNotifyEmail($notifyEmail);
    }

    /**
     * {@inheritDoc}
     */
    public function getNotifyEmail()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getNotifyEmail', []);

        return parent::getNotifyEmail();
    }

    /**
     * {@inheritDoc}
     */
    public function setLocaleFull($localeFull)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLocaleFull', [$localeFull]);

        return parent::setLocaleFull($localeFull);
    }

    /**
     * {@inheritDoc}
     */
    public function getLocaleFull()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLocaleFull', []);

        return parent::getLocaleFull();
    }

}
